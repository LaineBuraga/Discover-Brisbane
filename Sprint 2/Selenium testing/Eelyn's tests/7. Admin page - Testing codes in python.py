# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re

class 7AdminPageTestingCodesInPython(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "http://127.0.0.1:8000/"
        self.verificationErrors = []
        self.accept_next_alert = True
    
    def test_7_admin_page_testing_codes_in_python(self):
        driver = self.driver
        driver.get("http://127.0.0.1:8000/admin")
        driver.find_element_by_id("id_username").clear()
        driver.find_element_by_id("id_username").send_keys("Susan")
        driver.find_element_by_id("id_password").clear()
        driver.find_element_by_id("id_password").send_keys("susanpassword")
        driver.find_element_by_css_selector("input[type=\"submit\"]").click()
        try: self.assertEqual("Site administration | Django site admin", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Susan", driver.find_element_by_css_selector("strong").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Discoverbris", driver.find_element_by_link_text("Discoverbris").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Auth users", driver.find_element_by_link_text("Auth users").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Clients", driver.find_element_by_link_text("Clients").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Feedbacks", driver.find_element_by_link_text("Feedbacks").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Locations", driver.find_element_by_link_text("Locations").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Add", driver.find_element_by_css_selector("tr.model-authuser > td > a.addlink").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Change", driver.find_element_by_xpath("(//a[contains(text(),'Change')])[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("View site", driver.find_element_by_link_text("View site").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Change password", driver.find_element_by_link_text("Change password").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Log out", driver.find_element_by_link_text("Log out").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("View site").click()
        try: self.assertEqual("Discover Brisbane", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("logout", driver.find_element_by_css_selector("button.logout").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.back()
        driver.find_element_by_link_text("Auth users").click()
        try: self.assertEqual("Susan Susan", driver.find_element_by_link_text("Susan Susan").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Auth user", driver.find_element_by_css_selector("th.column-__str__ > div.text > span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Susan Susan").click()
        try: self.assertEqual("", driver.find_element_by_name("_save").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Auth users").click()
        driver.find_element_by_link_text("Discoverbris").click()
        driver.find_element_by_link_text("Change").click()
        driver.find_element_by_link_text("Susan Susan").click()
        driver.find_element_by_name("_save").click()
        driver.find_element_by_link_text("Discoverbris").click()
        driver.find_element_by_link_text("Add").click()
        driver.find_element_by_id("id_password").clear()
        driver.find_element_by_id("id_password").send_keys("test")
        driver.find_element_by_link_text("Today").click()
        driver.find_element_by_link_text("Now").click()
        driver.find_element_by_id("id_is_superuser").clear()
        driver.find_element_by_id("id_is_superuser").send_keys("1")
        driver.find_element_by_id("id_username").clear()
        driver.find_element_by_id("id_username").send_keys("Mark")
        driver.find_element_by_id("id_first_name").clear()
        driver.find_element_by_id("id_first_name").send_keys("Mark")
        driver.find_element_by_id("id_last_name").clear()
        driver.find_element_by_id("id_last_name").send_keys("Weins")
        driver.find_element_by_id("id_email").clear()
        driver.find_element_by_id("id_email").send_keys("markw@gmail.com")
        driver.find_element_by_id("id_is_staff").clear()
        driver.find_element_by_id("id_is_staff").send_keys("1")
        driver.find_element_by_id("id_is_active").clear()
        driver.find_element_by_id("id_is_active").send_keys("1")
        driver.find_element_by_css_selector("div.form-row.field-date_joined > div > p.datetime > span.datetimeshortcuts > a").click()
        driver.find_element_by_xpath("(//a[contains(text(),'Now')])[2]").click()
        driver.find_element_by_name("_save").click()
        try: self.assertEqual("The auth user \"Mark Weins\" was added successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Discoverbris").click()
        driver.find_element_by_link_text("Change").click()
        driver.find_element_by_link_text("Mark Weins").click()
        driver.find_element_by_link_text("Delete").click()
        driver.find_element_by_link_text("No, take me back").click()
        driver.find_element_by_id("id_is_active").clear()
        driver.find_element_by_id("id_is_active").send_keys("0")
        driver.find_element_by_link_text("Delete").click()
        driver.find_element_by_css_selector("input[type=\"submit\"]").click()
        try: self.assertEqual("The auth user \"Mark Weins\" was deleted successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Discoverbris").click()
        driver.find_element_by_link_text("Clients").click()
        try: self.assertEqual("Client", driver.find_element_by_css_selector("th.column-__str__ > div.text > span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Add client").click()
        driver.find_element_by_id("id_password").clear()
        driver.find_element_by_id("id_password").send_keys("test")
        driver.find_element_by_id("id_username").clear()
        driver.find_element_by_id("id_username").send_keys("Jessica")
        driver.find_element_by_id("id_first_name").clear()
        driver.find_element_by_id("id_first_name").send_keys("Jessica")
        driver.find_element_by_id("id_last_name").clear()
        driver.find_element_by_id("id_last_name").send_keys("Loveheart")
        driver.find_element_by_id("id_email").clear()
        driver.find_element_by_id("id_email").send_keys("jesslove@gmail.com")
        driver.find_element_by_id("id_phone_number").clear()
        driver.find_element_by_id("id_phone_number").send_keys("0123456789")
        driver.find_element_by_id("id_client_type").clear()
        driver.find_element_by_id("id_client_type").send_keys("Business")
        driver.find_element_by_name("_save").click()
        try: self.assertEqual("The client \"Jessica Loveheart\" was added successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Jessica Loveheart").click()
        driver.find_element_by_id("id_phone_number").clear()
        driver.find_element_by_id("id_phone_number").send_keys("0123456800")
        driver.find_element_by_name("_save").click()
        try: self.assertEqual("The client \"Jessica Loveheart\" was changed successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("th.field-__str__ > a").click()
        driver.find_element_by_id("id_client_type").clear()
        driver.find_element_by_id("id_client_type").send_keys("Student")
        driver.find_element_by_name("_save").click()
        try: self.assertEqual("The client \"Jessica Loveheart\" was changed successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("th.field-__str__ > a").click()
        driver.find_element_by_link_text("Delete").click()
        driver.find_element_by_css_selector("input[type=\"submit\"]").click()
        try: self.assertEqual("The client \"Jessica Loveheart\" was deleted successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Discoverbris").click()
        driver.find_element_by_link_text("Feedbacks").click()
        driver.find_element_by_link_text("Sam ( asd@gmail.com )").click()
        try: self.assertEqual("Email:", driver.find_element_by_css_selector("label.required").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Message:", driver.find_element_by_css_selector("div.form-row.field-message > div > label.required").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Name:", driver.find_element_by_css_selector("div.form-row.field-name > div > label.required").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Delete").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("#content > h1").text, r"^exact:Are you sure[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("input[type=\"submit\"]").click()
        try: self.assertEqual("The feedback \"Sam ( asd@gmail.com )\" was deleted successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Discoverbris").click()
        driver.find_element_by_link_text("Locations").click()
        driver.find_element_by_link_text("Queen Street Mall").click()
        driver.find_element_by_link_text("Locations").click()
        try: self.assertEqual("Select location to change | Django site admin", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Add location").click()
        driver.find_element_by_id("id_name").clear()
        driver.find_element_by_id("id_name").send_keys("Test")
        driver.find_element_by_id("id_address").clear()
        driver.find_element_by_id("id_address").send_keys("123 test road, test town")
        driver.find_element_by_id("id_phone_number").clear()
        driver.find_element_by_id("id_phone_number").send_keys("0123456789")
        driver.find_element_by_id("id_email").clear()
        driver.find_element_by_id("id_email").send_keys("test@aol.com")
        driver.find_element_by_id("id_category").clear()
        driver.find_element_by_id("id_category").send_keys("Industry")
        driver.find_element_by_id("id_photo_name").clear()
        driver.find_element_by_id("id_photo_name").send_keys("industry.jpg")
        driver.find_element_by_name("_save").click()
        try: self.assertEqual("The location \"Test\" was added successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Test", driver.find_element_by_css_selector("th.field-__str__ > a").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("th.field-__str__ > a").click()
        driver.find_element_by_link_text("Delete").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("#content > h1").text, r"^exact:Are you sure[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Location: Test", driver.find_element_by_xpath("//div[@id='content']/ul[2]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("input[type=\"submit\"]").click()
        try: self.assertEqual("The location \"Test\" was deleted successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("Queen Street Mall").click()
        driver.find_element_by_id("id_category").clear()
        driver.find_element_by_id("id_category").send_keys("Park")
        driver.find_element_by_name("_save").click()
        try: self.assertEqual("The location \"Queen Street Mall\" was changed successfully.", driver.find_element_by_css_selector("li.success").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("th.field-__str__ > a").click()
        driver.find_element_by_id("id_category").clear()
        driver.find_element_by_id("id_category").send_keys("Mall")
        driver.find_element_by_name("_save").click()
        driver.find_element_by_link_text("Discoverbris").click()
        driver.find_element_by_link_text("Home").click()
        driver.find_element_by_link_text("Log out").click()
        try: self.assertEqual("Logged out | Django site admin", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException as e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException as e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
